#!/usr/bin/env node

const MonolithicPdfReader = require('./readers/MonolithicPdfReader')
const MonolithicPdfWriter = require('./writers/MonolithicPdfWriter')
const DocumentCloudUploader = require('./uploaders/DocumentCloudUploader')

let program = require('commander')

program
  .version('0.0.1', '-v, --version')
  .option('-i, --input-file <input-file>', 'path to input file')
  .option('-o, --output-dir <output-dir>', 'output directory, where files will be created')
  .option('-t, --input-type <input-type>', 'type of input file (MonolithicPdf, MultiplePdf)')
  .option('-T, --output-type <output-type>', 'type of output files (MultiplePdf)')
  .option('-p, --document-cloud-project-id <document-cloud-project-id>', 'Project ID of existing DocumentCloud project')
  .option('-u, --document-cloud-username <document-cloud-username>', 'DocumentCloud username (you will be prompted for your password unless you also use the -P option)')
  .option('-P, --document-cloud-password <document-cloud-password>', 'DocumentCloud password (be careful about using this option, as it could expose your password in a ps listing or in your history file')
  .parse(process.argv)

if (!program.inputFile) {
  console.error('No input file specified.  Exiting.')
  process.exit(1)
}

if (!program.outputDir) {
  program.outputDir = '/tmp'
}

if (!program.inputType) {
  program.inputType = 'MonolithicPdf'
}

if (!program.inputType.match(/^(MonolithicPdf|MultiplePdf)$/)) {
  console.error(`Unrecognized input type "${program.inputType}".  Exiting.`)
  process.exit(1)
}

if (!program.outputType.match(/^(MultiplePdf)$/)) {
  console.error(`Unrecognized output type "${program.outputType}".  Exiting.`)
  process.exit(1)
}

if (program.documentCloudProjectId && !program.documentCloudUsername) {
  console.error(`DocumentCloud project ID specified, but no username specified.  Exiting.`)
  process.exit(1)
}

let u = null
let r = null
let w = null

if (program.documentCloudProjectId) {
  u = new DocumentCloudUploader({
    username: program.documentCloudUsername,
    password: program.documentCloudPassword,
    projectId: program.documentCloudProjectId
  })

  u.validateProjectId(program.documentCloudProjectId).then(function (response) {
    if (response) {
      console.log('Project id ' + program.documentCloudProjectId + ': ' + response.title)
      processInput()
    } else {
      console.error('Project id ' + program.documentCloudProjectId + ' is invalid.')
    }
  }, function (error) {
    console.error(error)
    process.exit(1)
  })
} else {
  // if we're not using DocumentCloud, just go ahead and process the
  processInput()
}

function processInput () {
  switch (program.inputType) {
    case 'MonolithicPdf':
      r = new MonolithicPdfReader({
        src: program.inputFile
      })

      // FIXME: this writer is really a MonolithicPdfToMultiplePdfWriter...
      // need to check the output type and load the appropriate writer
      w = new MonolithicPdfWriter({
        src: program.inputFile,
        outDir: program.outputDir
      })

      break

    default:
      console.error(`Input type "${program.inputType}" not yet supported.  Exiting.`)
      process.exit(0)
  }

  console.log('reading input ' + program.inputFile + '...')

  r.read().then(function (emails) {
    w.setEmails(emails)
    return w.write()
  }).then(function (files) {
    if (u) {
      u.uploadFiles(files)
    }
  })
}
